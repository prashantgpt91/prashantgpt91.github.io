name: 'James Powell'
email: 17ed318ec7168bd426e059259e1792f5
url: 'https://therocketeers.cr.rs'
message: "<p>Houston, we have spam. I looked at your source code and found that you don&#39;t have a honeypot to catch spammers. The basic idea is to have a text input that&#39;s hidden to normal users using css but visible to spam bots since they don&#39;t usually run css. The spam bot fills up the honeypot and wham your server quietly throws that comment away. </p>\n<p>If you look at the source code on my website you&#39;ll see that I also have a secondary verification system to catch spam bots. Each time someone comments on a webpage some javascript code runs in the background converting a long and random string into a SHA256 checksum. Both the checksum and the unhashed original string are posted along with the comment. On my server, which runs Node.js by the way, the random string is again hashed with SHA256 and checked against the checksum submitted by the user. If they match and if the checksum has never appeared in my database previously, the input is accepted.</p>\n<p>Instead of using Github directly I use Github Gist to store my comments, encrypted with AES. I also notice that you&#39;re using Gravatar with the md5 checksum exposed. I strongly discourage doing this. The api Gravatar uses makes salting the email address impossible. Instead I recommend that you modify your PHP script to act as a proxy between Gravatar and your user. Basically, how this works is that instead of querying Gravatar directly with the md5 hash you query your own server with a SHA256 hash of the email which is presalted. Assuming you keep the email address and salt on record you can verify that the salted hash matches the email address and then fetch the correct Gravatar icon by md5 hashing the email on your server and returning it to the user.</p>\n"
